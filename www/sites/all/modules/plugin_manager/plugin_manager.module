<?php
// $Id: plugin_manager.module,v 1.51.2.36 2008/11/26 21:57:50 jabapyth Exp $

/**
 * @file
 * Several functions needed by the plugin manager.
 *
 * The plugin manager allows users to select and install new
 * themes and modules directly from d.o.
 */

/**
 * Implementation of hook_menu().
 */
function plugin_manager_menu() {
  $items['admin/plugin_manager'] = array(
    'title' => 'Plugin Manager',
    'description' => 'Automatically install new content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_find'),
    'access arguments' => array('access plugin manager'),
    'file' => 'plugin_manager.admin.inc',
    'position' => 'right',
    'weight' => -7,
  );
  $items['admin/plugin_manager/search'] = array(
    'title' => 'Search',
    'description' => 'Search for new themes and modules to queue for installation.',
    'page callback' => 'plugin_manager_search',
    'access arguments' => array('install plugins'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/search/ajax'] = array(
    'title' => 'Search',
    'description' => 'AJAX callback.',
    'page callback' => 'plugin_manager_search_ajax_callback',
    'access arguments' => array('install plugins'),
    'file' => 'plugin_manager.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/plugin_manager/install'] = array(
    'title' => 'Install',
    'description' => 'Install the themes and modules that have been selected.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_install_form'),
    'access arguments' => array('install plugins'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/find'] = array(
    'title' => 'Find',
    'description' => 'Search for new themes and modules to queue for installation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_find'),
    'access arguments' => array('install plugins'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/settings'] = array(
    'title' => 'Settings',
    'description' => 'Control the way that the Plugin Manager operates.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_settings_form'),
    'access arguments' => array('plugin manager settings'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/uninstall'] = array(
    'title' => 'Uninstall',
    'description' => 'Uninstall themes and plugins that were installed with the Plugin Manager.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_uninstall_form'),
    'access arguments' => array('uninstall plugins'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/update'] = array(
    'title' => 'Update',
    'description' => 'Update modules that are out of date.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_update_form'),
    'access arguments' => array('install modules'),
    'file' => 'plugin_manager.admin.inc',
    'block callback' => 'system_admin_theme_settings',
  );
  $items['admin/plugin_manager/manual'] = array(
    'title' => 'Manual Install',
    'page callback' => 'drupal_get_form',   
    'page arguments' => array('plugin_manager_manual'),     
    'access arguments' => array('manually install plugins'),     
    'file' => 'plugin_manager.admin.inc',   
    'type' => MENU_CALLBACK,
  );
  $items['admin/plugin_manager/reload'] = array(
    'title' => 'Reload Repository',
    'page callback' => 'drupal_get_form',   
    'page arguments' => array('plugin_manager_reload'),     
    'access arguments' => array('install plugins'),     
    'file' => 'plugin_manager.admin.inc',   
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/modules/install'] = array(
    'title' => 'Install',
    'access arguments' => array('install plugins'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_find'),
    'file' => 'plugin_manager.admin.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/themes/install'] = array(
    'title' => 'Install',
    'access arguments' => array('install plugins'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plugin_manager_find'),
    'file' => 'plugin_manager.admin.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function plugin_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/plugin_manager/find':
    case 'admin/plugin_manager':
      return '<p>'. t('This allows users to install new modules and themes much more easily. To use this module, use the search box below to look for modules and themes.  Alternatively, you can just select a category to view.  Add any found modules and themes to the queue.  Finally, click on the Install tab to continue with fetching and installing the modules.') .'</p>';
    case 'admin/plugin_manager/install':
      return '<p><strong>'. t('Note: the more items you select, the longer the installation will take, potentially causing it to time out.') .'</strong></p>';
    case 'admin/plugin_manager/uninstall':
      return '<p>'. t('This will only show plugins that are currently disabled and are not part of Drupal core.  ') . l(t('(Disable modules here)'), 'admin/build/modules') .'</p>';
    case 'admin/plugin_manager/manual':
      return '<p>'. t('This is for manual installation of plugins') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function plugin_manager_perm() {
  return array('access plugin manager','manually install plugins', 'install plugins', 'plugin manager settings', 'uninstall plugins');
}

/**
 * Get a list of all available backends that can upload files onto our system.
 *
 * @return
 *   Array containing the names of all available frontends.
 */
function plugin_manager_backends() {
  $backend = array();
  // Open that directory to view the contained files / folders
  if ($handle = opendir(dirname(__FILE__))) {
    // Look through the modules of that folder
    while ($current = readdir($handle)) {
      // If the file is a backend file then load it.
      if (strstr($current, ".backend.inc") == ".backend.inc") {
        include_once($current);
        // If there is a backend hook, then run it.
        $name = str_replace('.backend.inc', '', $current);
        if (function_exists($name .'_plugin_manager_backend')) {
          $output = call_user_func($name .'_plugin_manager_backend');
          // If the backend is available, note it.
          if (!empty($output)) {
            $backend[$output] = $output;
          }
        }
      }
    }
  }

  sort($backend);
  return $backend;
}

/**
 * Attempts to get a file using drupal_http_request and to store it locally.
 *
 * @param $path
 *   The URL of the file to grab.
 * @return
 *   On success the address the files was saved to, FALSE on failure.
 */
function plugin_manager_get($path) {
  // Get each of the specified files.
  $parsed_url = parse_url($path);
  $local = file_directory_path() ."/plugin_manager_cache/". basename($parsed_url['path']);

  // Check the cache and download the file if needed
  if (!file_exists($local)) {

    // $result->data is the actual contents of the downloaded file.  This saves it
    // into a local file, whose path is stored in $local.  $local is stored relative
    // to the drupal installation.
    $result = drupal_http_request($path);
    if ($result->code != 200 OR !file_save_data($result->data, $local)) {
      drupal_set_message(t('@remote could not be saved.', array('@remote' => $path)), 'error');
      return FALSE;
    }
  }
  return $local;
}

/**
 * Untars a file.
 *
 * @param $file
 *   The file to untar.
 * @return
 *   An array containing the locations of the extracted files.
 */
function plugin_manager_untar($file) {
  $dir = file_directory_path() .'/plugin_manager_extraction/';
  $file_safe = escapeshellarg($file);
  $dir_safe  = escapeshellarg($dir);
  $file_list = array();

  // Try to use tar to extract the files.
  if (function_exists('popen')) {
    $handle = popen("tar -zvxf $file_safe -C $dir_safe", "r");
    while ($line = fgets($handle)) {
      $file_list[] = trim($line);
    }
    pclose($handle);
  }

  // If tar returned something (a.k.a, is present) then return it
  if (!empty($file_list)) {
    return $file_list;
  }

  // If we get this far then tar failed.  Attempt to extract using PEAR's Archive/Tar.
  // This should still be GPL safe since this modules does not depend on PEAR.
  @include_once("Archive/Tar.php");

  // If it doesn't exist either, then we can't explode the files.
  if (!class_exists("Archive_Tar")) {
    drupal_set_message(t('Neither the tar executable nor the Archive/Tar package could be located.'), "error");
    return FALSE;
  }

  // Attempt to explode the file with PEAR.
  $tar = new Archive_Tar($file);
  $tar->extract($dir);

  // Get a list of the extracted files.
  foreach ($tar->listcontent() AS $file) {
    $file_list[] = trim($file['filename']);
  }

  // Return the list
  return $file_list;
}

/**
 * Downloads the list of available themes/modules.
 *
 * @return
 *  An form array to be displayed.
 */
function plugin_manager_reload() {
  // Download a new copy of the project-list.
  $file = drupal_http_request("http://updates.drupal.org/release-history/project-list/all");
  if (isset($file->error)) {
    drupal_set_message(t($file->error), 'error');
    return array();
  }

  // Parse it.
  $xml = simplexml_load_string($file->data);
  if ($xml == FALSE) {
    return array();
  }

  // Clear the current cache.
  db_query("DELETE FROM {plugin_manager_repository}");
  db_query("DELETE FROM {plugin_manager_taxonomy}");

  // Look at each project node.
  $drupal_version = constant("DRUPAL_CORE_COMPATIBILITY");
  foreach ($xml->project AS $project) {
    // If there isn't a release for this version of Drupal then skip it.
    if (!isset($project->api_versions)) {
      continue;
    }
    $versions = (array) $project->api_versions;
    if (!is_array($versions['api_version'])) {
      $versions['api_version'] = array($versions['api_version']);
    }
    if (!in_array($drupal_version, $versions['api_version'])) {
      continue;
    }

    // Toss it in the database
    $short_name = $project->short_name;
    db_query("INSERT INTO {plugin_manager_repository} (title, short_name, links)
              VALUES('%s', '%s', '%s')", $project->title, $short_name, $project->link);

    // Find the appropriate taxonomy terms.
    if (isset($project->terms)) {
      foreach ($project->terms->term AS $term) {
        db_query("INSERT INTO {plugin_manager_taxonomy} (short_name, tag)
                  VALUES('%s', '%s')", $short_name, $term->value);
      }
    }
  }
  drupal_set_message(t("The repository was updated successfully."), "status");
  variable_set("plugin_manager_last_reload", date('U'));
  return array();
}

/**
 * Get the information about each plugin.
 *
 * @param $projects
 *  The project or projects on which information is desired.
 * @return
 *  An array containing info on the supplied projects.
 */
function plugin_manager_get_release_history($projects) {
  $version = constant("DRUPAL_CORE_COMPATIBILITY");
  $results = array();

  // If projects isn't an array, turn it into one.
  if (!is_array($projects)) {
    $projects = array($projects);
  }

  // Look up the data for every project requested.
  foreach ($projects AS $project) {
    $file = drupal_http_request("http://updates.drupal.org/release-history/$project/$version");
    $xml = simplexml_load_string($file->data);

    // If it failed, then quit.
    if ($xml == FALSE) {
      drupal_set_message(t("Downloading the release history failed for @project.", array('@project' => $project)), "error");
      return FALSE;
    }

    // Get the title, release_link and download_link.
    $results[$project]['title'] = (string)$xml->title;

    // Get the information about every release
    foreach ($xml->releases->release AS $release) {
      $release_version = (string)$release->version;
      $results[$project]['release'][] = array(
        'release_link' => (string)$release->release_link,
        'download_link' => (string)$release->download_link,
        'date' => (string)$release->date,
        'version' => $release_version,
      );
      $results[$project]['version'][] = $release_version;
    }
  }

  // Order them and then return the results.
  ksort($results);
  return $results;
}

/**
 * See if everything that is needed to use the plugin manager is available.
 *
 * @return
 *  TRUE if all of the required dependencies are available, FALSE otherwise.
 */
function plugin_manager_runnable() {
  // See if we have a way to untar the files.
  @include_once("Archive/Tar.php");
  $handle = popen("tar --version", "r");
  if (!fgets($handle) AND !class_exists("Archive_Tar")) {
    drupal_set_message(t('The plugin manager cannot run because neither the tar executable nor the Archive/Tar package could be located.'), "error");
    return FALSE;
  }
  pclose($handle);

  // See if we have any available backends.
  $backends = plugin_manager_backends();
  if (empty($backends)) {
    drupal_set_message(t('No backends are usable.'), 'error');
    return FALSE;
  }

  return TRUE;
}
